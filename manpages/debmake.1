.\"                                      Hey, EMACS: -*- nroff -*-
.\" see man(7), man(1)
.TH DEBMAKE "1" "May 2013" "4.0" "User Commands"
.\" Some roff macros, for reference:
.\" .nh        disable hyphenation
.\" .hy        enable hyphenation
.\" .ad l      left justify
.\" .ad b      justify to both left and right margins
.\" .nf        disable filling
.\" .fi        enable filling
.\" .br        insert line break
.\" .sp <n>    insert n+1 empty lines
.\" TeX users may be more comfortable with the \fB<whatever>\fP and
.\" \fI<whatever>\fP escape sequences to invoke bold face and italics,
.\" respectively.
.\" for manpage-specific macros, see man(7)
.SH NAME
debmake \- program to make the Debian source package
.SH SYNOPSIS
.B debmake 
[\fB\-h\fP] [\fB\-c\fP] [\fB\-n\fP | \fB\-a\fP \fIpackage\-version.orig.tar.gz\fP | \fB\-d\fP | \fB\-t\fP ] [\fB\-p\fP \fIpackage\fP] [\fB\-u\fP \fIversion\fP] [\fB\-r\fP \fIrevision\fP] [\fB\-z\fP \fIextension\fP] [\fB\-b\fP "\fIpackage[:type], ...\fP]" [\fB\-e\fP \fIfoo@example.org\fP] [\fB\-f\fP "\fIfirstname lastname\fP"] [\fB\-i\fP "\fIbuildtool\fP" | \fB\-j\fP] [\fB\-l\fP \fIlicense_file\fP] [\fB\-m\fP] [\fB\-o\fP \fIfile\fP] [\fB\-q\fP] [\fB\-v\fP] [\fB\-w\fP "\fIaddon, ...\fP"] [\fB\-x\fP [01234]] [\fB\-y\fP] 

.SH DESCRIPTION
\fBdebmake\fP helps to build the Debian package from the upstream source.
Normally, this is done as follows:
.IP \(bu 2
The upstream tarball is downloaded as the \fIpackage\-version.tar.gz\fP file.
.IP \(bu 2
It is untared to create many files under the \fIpackage\-version/\fP directory.
.IP \(bu 2
\fBdebmake\fP is invoked in the \fIpackage\-version/\fP directory possibly without any arguments.
.IP \(bu 2
\fBdebmake\fP generates the \fIpackagename_version.orig.tar.gz\fP symlink pointing to the upstream tarball.
.IP \(bu 2
\fBdebmake\fP generates the template files in the \fIpackage\-version\fP\fB/debian/\fP directory.
.IP \(bu 2
These template files should be manually adjusted to their perfection.
.IP \(bu 2
\fBdpkg\-buildpackage\fP (usually from its wrapper \fBdebuild\fP or \fBpdebuild\fP) is invoked in the \fIpackage\-version/\fP directory to make debian packages.
.PP
\fBdebmake\fP always builds the source for the multi\-arch package, unless \fB\-m\fP option is explicitly specified.
.PP
\fBdebmake\fP always builds the non\-native Debian package with the "\fB3.0 (quilt)\fP" format, unless \fB\-n\fP option is explicitly specified.
.PP
Most of the obvious option states and values are automatically set by \fBdebmake\fP with good defaults by scanning the source code. 
.PP
The functional single\-binary package can be generated automatically without touching files in the \fIpackage\-version\fP\fB/debian/\fP directory.  The generated package can be used locally.
.IP \(bu 2
To comply with the strict quality requirements of the Debian archive, these template files must be manually adjusted to their perfection before the upload.
.IP \(bu 2
For example, you can get a Python module packaged by the Python distutils and make its Debian binary package by simply running "\fBdebmake \-d \-i debuild\fP" in its untared source tree.
.PP
The functional multi\-binary package always requires some extra manual works. These works are done as follows:
.IP \(bu 2
Invoke \fBdebmake\fP with the \fB\-b\fP'\fIpackage1:type1, ...\fP' and \fB\-j\fP options in the \fIpackage\-version/\fP directory.
.IP \(bu 2
Check the last lines of \fIpackage\fP.\fBbuild\-dep.log\fP to judge build dependencies for \fBBuild\-Depends:\fP. (You do not need to list packages used by \fBdebhelper\fP, \fBperl\fP , or \fBfakeroot\fP explicitly in \fBBuild\-Depends:\fP.)
.IP \(bu 2
Check the contents of \fIpackage\fP.\fBinstall.log\fP to identify file paths in \fBdebian/tmp\fP.
.IP \(bu 2
Update \fBdebian/control\fP and \fBdebian\fP/\fIpackage\fP.\fBinstall\fP files using the above information.
.IP \(bu 2
Update other \fBdebian/\fP\fI*\fP files as needed.
.IP \(bu 2
Build binary packages with \fBdebuild\fP, \fBpdebuild\fP, etc.
.IP \(bu 2
Files installed into \fBdebian/tmp\fP are split by \fBdebian\fP/\fIpackage\fP.\fBinstall\fP into each \fIpackage\fP_\fIversion\fP\-\fIrevision\fP_\fIarch\fP.\fBdeb\fP.
.PP
\fBdebmake\fP has the \fB\-a\fP option to make it work directly with the tarball.
.PP
\fBdebmake\fP has the \fB\-t\fP and \fB\-d\fP options to make it work well with the source files in VCS.  These options also allow to make the non\-native Debian package from the VCS source tree with the \fIpackage\-version\fP\fB/debian/\fP directory.  Please note, the non\-native Debian package is the normal Debian package.
.PP
Argument may need to be quoted to protect from the shell.

.SS "optional arguments:"
.TP
\fB\-h\fP, \fB\-\-help\fP
show this help message and exit.
.TP
\fB\-c\fP, \fB\-\-copyright\fP
scan source for copyright+license text and exit.
.TP
\fB\-n\fP, \fB\-\-native\fP
make a native Debian source package without \fB.orig.tar.gz\fP.  This makes the "\fB3.0 (native)\fP" format package.
.IP
If you are thinking to package a Debian specific source tree with \fBdebian/\fP\fI*\fP in it into a native Debian package, please think othrewise.  You can use "\fBdebmake \-d\fP \fB\-i debuild\fP" or "\fBdebmake \-t\fP \fB\-i debuild\fP" to make the "\fB3.0 (quilt)\fP" format non\-native Debian package.  The only difference is that the \fBdebian/changelog\fP file must use the  non\-native version scheme: \fIversion\-revision\fP.  The non\-native package is more friendly to the downstream distributions.
.TP
\fB\-a\fP \fIpackage\-version.tar.gz\fP, \fB\-\-archive\fP \fIpackage\-version.tar.gz\fP
use the upstream source tarball directly. (\fB\-p\fP, \fB\-u\fP, \fB\-z\fP: overridden)
.IP
The upstream tarball may be specified as \fIpackage\_version.orig.tar.gz\fP and; \fBtar.gz\fP for all cases may be \fBtar.bz2\fP, or \fBtar.xz\fP.
.IP
If the specified upstream tarball name contains uppercase letters, the Debian package name is generated by converting them to lowercase letters.
.TP
\fB\-d\fP, \fB\-\-dist\fP
run "\fBmake dist\fP" equivalent first to generate upstream tarball and use it.
.IP
"\fBdebmake \-d\fP" is designed to run in the \fIpackage/\fP directory hosting the upstream VCS with the build system supporting "\fBmake dist\fP" equivalents. (automake/autoconf, Python distutils, ...)
.TP
\fB\-t\fP, \fB\-\-tar\fP
run "\fBtar\fP" to generate upstream tarball and use it
.IP
"\fBdebmake \-t\fP" is designed to run in the \fIpackage/\fP directory hosting the VCS.  Unless there is the \fBdebian/changelog\fP file, you need to provide the upstream version with the \fB\-u\fP option.  The generated tarball excludes the \fBdebian/\fP directory. (It also excludes typical VCS directories: \fB.git/\fP \fB.hg/\fP \fB.svn/\fP \fB.CVS/\fP)
.TP
\fB\-p\fP \fIpackage\fP, \fB\-\-package\fP \fIpackage\fP
set the Debian package name.
.TP
\fB\-u\fP \fIversion\fP, \fB\-\-upstreamversion\fP \fIversion\fP
set the upstream package version.
.TP
\fB\-r\fP \fIrevision\fP, \fB\-\-revision\fP \fIrevision\fP
set the Debian package revision.
.TP
\fB\-z\fP \fIextension\fP, \fB\-\-targz\fP \fIextension\fP
set the tarball type,
.IP
\fIextension\fP=(\fBtar.gz\fP|\fBtar.bz2\fP|\fBtar.xz\fP)
.TP
\fB\-b\fP "\fIpackage[:type],...\fP", \fB\-\-binaryspec\fP "\fI'package[:type],...'\fP"
set binary package specs as comma separated list, e.g., 
in full form "\fBfoo:bin, foo\-doc:doc, libfoo1:lib, libfoo1\-dbg:dbg, libfoo\-dev:dev\fP" or 
in short form "\fB, \-doc, libfoo1, libfoo1\-dbg, libfoo\-dev\fP".
.IP
The meanings of \fItype\fP with (arch, multi-arch) values are as follows:
.IP
\fBbin\fP: C/C++ compiled binary code package (any, foreign) (default)
.IP 
\fBdata\fP: Data (fonts, graphics, ...) package (all, foreign)
.IP
\fBdbg\fP: Debug symbol package (any, same)
.IP
\fBdev\fP: Library development package (any, same)
.IP
\fBdoc\fP: Documentation package (all, foreign)
.IP
\fBlib\fP: Library package (any, same)
.IP
\fBperl\fP: Perl script package (all, foreign)
.IP
\fBpython\fP: Python script package (all, foreign)
.IP
\fBpython3\fP: Python3 script package (all, foreign)
.IP
\fBruby\fP: Ruby script package (all, foreign)
.IP
\fBscript\fP: Shell script package (all, foreign)
.TP
\fB\-e\fP \fIfoo@example.org\fP, \fB\-\-email\fP \fIfoo@example.org\fP
set e\-mail address.
.IP
The default is taken from the value of the environment variable \fB$DEBEMAIL\fP.  
.TP
\fB\-f\fP "\fIfirstname lastname\fP", \fB\-\-fullname\fP "\fIfirstname lastname\fP"
set the fullname.
.IP
The default is taken from the value of the environment variable \fB$DEBFULLNAME\fP.  
.TP
\fB\-i\fP "\fIbuildtool\fP", \fB\-\-invoke\fP "\fIbuildtool\fP"
invoke "\fIbuildtool\fP" at the end of execution.  "\fIbuildtool\fP" may be "\fBdpkg\-buildpackage\fP", "\fBdebuild\fP", "\fBpdebuild\fP", "\fB"pdebuild  \-\-pbuilder cowbuilder"\fP", etc..
.IP
The default is not to execute any program.
.TP
\fB\-j\fP, \fB\-\-judge\fP
run \fBdpkg\-depcheck\fP to judge build dependencies and identify file paths.  Log files are in the parent directory.
.IP
\fIpackage\fP.\fBbuild\-dep.log\fP: Log file for \fBdpkg\-depcheck\fP.
.IP
\fIpackage\fP.\fBinstall.log\fP: Log file recording files in the \fBdebian/tmp\fP directory.
.TP
\fB\-l\fP \fIlicense_file,...\fP, \fB\-\-license\fP \fIlicense_file,...\fP
add formatted license text to the end of the \fBdebian/copyright\fP file holding license scan results
.IP
The default is add \fBCOPYING\fP and \fBLICENSE\fP and \fIlicense_file\fP needs to list only the additional file names all separated by "\fB,\fP".
.TP
\fB\-m\fP, \fB\-\-monoarch\fP
force packages to be non\-mult\-iarch.
.TP
\fB\-o\fP \fIfile\fP, \fB\-\-option\fP \fIfile\fP
read optional parameters from \fIfile\fP.  (read as python code.  See README.option.)
.TP
\fB\-q\fP, \fB\-\-quitearly\fP
quit early before creating files in the \fBdebian/\fP directory.
.TP
\fB\-v\fP, \fB\-\-version\fP
show version information.
.TP
\fB\-w\fP "\fIaddon,...\fP", \fB\-\-with\fP "\fIaddon,...\fP"
add extra arguments to the \fB\-\-with\fP option of the \fBdh\fP(1) command as \fIaddon\fP in \fBdebian/rules\fP.
.IP
\fIaddon\fP values are listed all separated by "\fB,\fP", e.g., \fB\-w "python2,autoreconf\fP".
.IP
For Autotools based packages, setting \fBautoreconf\fP as \fIaddon\fP forces to run "\fBautoreconf \-i \-v \-f\fP" for every package building.  Otherwise, \fBautotools\-dev\fP as \fIaddon\fP is used as default.
.IP
For Autotools based packages, if they install Python programs, \fBpython2\fP as \fIaddon\fP is needed for packages with compat < 9 since this is non\-obvious.  But for \fBsetup.py\fP based packages, \fBpython2\fP as \fIaddon\fP is not needed since this is obvious and it is automatically set for the \fBdh\fP(1) command when it is required.
.TP
\fB\-x\fP \fIn\fP, \fB\-\-extra\fP \fIn\fP
generate extra configuration files as templates.
.IP
The number \fIn\fP changes which configuration templates are generated.
.IP
\fB\-x0\fP : bare minimum configuration files. (default if these files exist already)
.IP
\fB\-x1\fP : ,, + desirable configuration files. (default for new packages)
.IP
\fB\-x2\fP : ,, + interesting configuration files. (recommended for experts, multi\-binary aware)
.IP
\fB\-x3\fP : ,, + unusual configuration template files with the extra \fB.ex\fP suffix to ease their removal. (recommended for new users) To use these as configuration files, rename their file names into ones without the \fB.ex\fP suffix. 
.IP
\fB\-x4\fP : ,, + copyright file examples.
.IP
Existing configuration files are never overwritten.  If you wish to update some of the existing configuration files, please rename them before running the \fBdebmake\fP command and manually merge the generated configuration files with the old renamed ones.
.TP
\fB\-y\fP, \fB\-\-yes\fP
force "yes" for all prompts.

.SH EXAMPLES
For a well behaving source, you can build a good\-for\-local\-use installable single Debian binary package easily with one command.  Test install of such a package generated in this way offers a good alternative to traditional "\fBmake install\fP" to the \fB/usr/local\fP directory since the Debian package can be removed cleanly by the "\fBdpkg \-P\fP \fI...\fP" command. Here are some examples of how to build such test packages. (These should work in most cases.  If the \fB\-d\fP does not work, try \fB\-t\fP instead.)
.PP
For a typical C program source tree packaged with autoconf/automake:
.IP \(bu 2
\fBdebmake \-d \-i debuild\fP
.PP
For a typical python module source tree:
.IP \(bu 2
\fBdebmake \-d \-b':python' \-i debuild\fP
.PP
For a typical python module in the \fIpackage\-version.tar.gz\fP archive:
.IP \(bu 2
\fBdebmake \-a \fIpackage\-version.tar.gz \fB\-b':python' \-i debuild\fP
.PP
For a typical perl module in the \fIPackage\-version.tar.gz\fP archive:
.IP \(bu 2
\fBdebmake \-a\fP \fIPackage\-version.tar.gz \fB\-b':perl' \-i debuild\fP

.SH CAVEAT
\fBdebmake\fP focus on software packages with C/C++ (autoconf/automake) and Python (with distutils).
.PP 
\fBdebmake\fP supports to Ruby (with gem2deb) and Java (with javahelper) are not perfect.  
.PP 
There are some limitations for what characters may be used as a part of the Debian package.  The most notable limitation is the prohibition of uppercase letters in the package name.  Here is the summary in the regular expression.
.IP
Upstream package name (\fB\-p\fP): [\-+.a\-z0\-9]{2,}
.IP
Binary package name (\fB\-b\fP): [\-+.a\-z0\-9]{2,}
.IP
Upstream version (\fB\-u\fP): [0-9][\-+.:~a\-z0\-9A\-Z]*
.IP
Debian revision (\fB\-r\fP): [0-9][+.~a\-z0\-9A\-Z]*
.PP
See the exact definition in "5.6.1 Source", "5.6.7 Package", and 
"5.6.12 Version" of Debian Policy Manual.
(http://www.debian.org/doc/debian-policy/ch-controlfields.html)
.PP
Please make sure to protect the option arguments of the \fB\-b\fP,
\fB\-f\fP, \fB\-n\fP, and \fB\-w\fP options from the shell interference
by quoting them properly. 

.SH DEBUG
The character set in the environ variable \fBDEBUG\fP determines the logging output level.
.IP
\fBp\fP: list all parameters
.IP
\fBf\fP: copyright scanner input file
.IP
\fBi\fP: copyright scanner input line
.IP
\fBo\fP: line outside of copyright and license sections
.IP
\fBc\fP: line in copyright section
.IP
\fBl\fP: line in license section

.SH AUTHOR
Copyright \(co 2013 Osamu Aoki <osamu@debian.org>
.SH LICENSE
MIT License
.SH "SEE ALSO"
See also \fBdebhelper\fP(7), \fBdpkg\-buildpackage\fP(1) \fBdebuild\fP(1) and \fBpdebuild\fP(1) manpages and files in \fB/usr/share/doc/debmake/\fP.

Learn basics of Debian packaging with the "Debian New Maintainers' Guide" at http://www.debian.org/doc/manuals/maint-guide/ or with the maint-guide package.
