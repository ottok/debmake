If you are updating this source in the git repo, read on.

== BUILD ==

1. Check-out devel branch
2. Make modification
3. when debmake command line interface changes:
      * update debmake-doc package
      * generate a new debmake.1 file in its source
      * copy generated debmake.1 file into manpages/debmake.1
4. Add new entry to the debian/changelog with new upstream version
   dch create entry such as 4.1.1-2 --> change to 4.1.2-1
5. Update debmake/__init__.py with new upstream version 4.1.2
6. Update test/.LICENSE.KEEP
   $ cd test/src; make
   ... verify it is SUCESS
   (If new test case is added and it build result is good, copy the new
   test/.LICENSE.LOG to test/.LICENSE.KEEP to make this SUCESS)
7. Build with
   $ debmake -d -y -b':py3' -i pdebuild
    or
   $ python3 setup.py deb

8. Clean source tree with
   $ python3 setup.py clean

(Under freeze for release, work on main branch)

Please follow PEP-8 as much as possible.
 * indent 4 spaces
 * 80 char/line
   Coding style exceptions:
   * line for debug code -> single line for eaze of "grep"
   * some regex (max 100 char/line) for readability

== DEBUG ==

The source code can be tested by:
 * Set up the module loading path $PYTHONPATH and the command search path $PATH
   from the debmake source directory /path/to where setup.py is found:
    $ cd /path/to
    $ export PYTHONPATH=`pwd`
    $ export PATH=`pwd`/debmake:`pwd`/scripts:$PATH
   Now all scripts such as copyright.py and lc.py can be executed
   independently from the command line for debugging.

 * copyright.py [-s|-c|-t|-i|--] <file>
   
   * -s	 selftest
   * -c  extract copyright info as formatted text
   * -t  extract license info as plain text
   * -i  check license ID with extra info
   * --  check license ID and extract copyright (default)

 * lc.py [-][1|2|3|4|5|6] <files ...>
   check <files ...> for license ID in different mode of -c options in debmake
    1: -c       license ID
    2: -cc      license ID + license text
    3: -ccc     license ID + license text + extra
   -1: -cccc    license ID + internal ID
   -2: -ccccc   license ID + internal ID + license text
   -4: -cccccc  license ID + internal ID + license text + extra
    5: sub-string match for debug
    6: combination sub-string match for debug

Trouble shoot hints:
 * What to do for strange string contaminating license info?
   => Fix check_lines()       in debmake/copyright.py
 * What to do for incorrect range calculation for copyright years.
   => Fix analyze_copyright() in debmake/copyright.py
 * What to do for strange license type assignment?
   => Fix lc()                in debmake/lc.py

== HINTS for reading the source ==

How copyright files are scanned by debmake in normal usage?
  -k option execution  --> debmake/kludge.py    kludge()

  -c option execution  +-> debmake/scanfiles.py scanfiles()
                       +-> debmake/copyright.py check_copyright()

  normal execution     --> debmake/debian.py    debian()
                        +-> debmake/copyright.py copyright()
                               Here, copyright() gets:
                                 para['package']
                                 para['license']
                                 para['cdata']
                                 para['xml_html_files']
                                 para['binary_files']
                                 para['huge_files']
             These are set by debmake/analyze.py analyze(para) calling:
                                 -+--> debmake/scanfiles.py scanfiles()
                                  +--> debmake/copyright.py check_copyright()

What does scanfiles() do?
  Scan all files in source tree and make list of files for each category:
    nonlink_files, xml_html_files, binary_files, huge_files
  extensions holds all file extention types

What does check_copyright() do?
  Scan nonlink_files and return summary of copyright info as cdata
  by 3 step operations:
    adata = check_all_licenses()
    bdata = bunch_all_licenses(adata)
    cdata = format_all_licenses(bdata)

What does check_all_licenses() do?
  for each file:
    (copyright_data, license_lines) = check_license(file, ...)
      This extract copyright info section out of file using check_lines()
    norm_text = debmake.lc.normalize(license_lines)
      This normalize copyright info.
    (licenseid, licensetext, permissive) = debmake.lc.lc(norm_text, ...)
      This characterize license info from norm_text
      Here, md5hashkey is used to optimize operation speed

Osamu

